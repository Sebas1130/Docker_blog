CLASE 2
QUE ES DOCKER
docker te permite contruir, distribuir y ejecutar cualquier aplicacion en 
cualquier maquina

PROBLEMAS DE DESARROLLO DE SOFWARE PROFESIONAL:
 
 Hay tres grandes problemas principales que son los siguientos
 *Construir
 *Diseñar 
 *Ejecutar
 
 CONSTRUIR :
 Escribir codigo en la maquina del desarrollador.(Compile, que no compile,
 arreglar el bug, comparir codigo) 

 La Problematica es :
 *Entorno de desarrollo (paquetes)
 *Dependencias de desarrollo (paquetes)
 *Versiones en tiempo de ejecución
 *Equivalencia de entornos de desarrollo (código compartido)
 *Equivalencia con entornos productivos (pasar a producción)
 *Servicios externos (integración con otros servicios ejem: base de datos)
 
 DITRIBUIR : 
 llevar la aplicacion donde se va a desplegar(Transformarse en un artefacto 
 
 La Problematica es :
 *Output de build heterogeo (múltiples compilaciones)
 *Acceso a servidores productivos (No tenemos acceso al servidor)
 *Ejecución nativa vs virtualizada
 *Entornos Serverless
 
 EJECUTAR :
 implementar la solucion en el ambiente de producion(subir a producin el reto hacer 
 que funcione como deberia funcionar )
 
La Problematica es :
*Dependencia de aplicación (paquetes, runtime)
*Compatibilidad con el entorno productivo(sistema operativo poco amigable con la solución)
*Disponibilidad de servicios externos (Acceso a los servicios externos)
*Recursos de hardware (Capacidad de ejecución - Menos memoria, procesador más debil)

CLASE 3
VIRTUALIZACION :
Nos permite atacar o manejar los tres grandes problemas de los que estabmos hablando (PROBLEMAS DE DESARROLLO DE SOFWARE PROFESIONAL) la virtualizacion se puede hacer de dos maneras y vamos a hablar de ellas :

Problemas de la virtualizacion
*PESO: En el orden de los GBs. Repiten archivos en común. Inicio lento.
*COSTO DE ADMINISTRACION: Necesita mantenimiento igual que cualquier otra computadora.
*MULTIPLES DE FORMATO: VDI, VMDK, VHD, raw, etc

Containerización
El empleo de contenedores para construir y desplegar software.

*Flexibles
*Livianos
*Portables
*Bajo acoplamiento
*Escalables
*Seguros

Virtualizacion vs Containerización

*Virtualización: 
A diferencia de un contenedor, las máquinas virtuales ejecutan un sistema operativo completo, incluido su propio kernel.

Containerización: 
Un contenedor es un sitio aislado y ligero para ejecutar una aplicación en el sistema operativo . Los contenedores se basan en el kernel del sistema operativo host (que puede considerarse la fontanería del sistema operativo), y solo puede contener aplicaciones y algunas API ligeras del sistema operativo y servicios que se ejecutan en modo de usuario.


CLASE 4
instalacion de doker en linux ya viene nativamente solo es correr el comando 

$ sudo apt install docker 

ya dentras docker instalado 

CLASE 5
inicializando docker hub creamos la cuenta con tu nombre  correo y contraseña
despues con la misma cuenta de docker hud iniciamos play-with-docker

play-with-docker

Es una instacia de docker pero en la wed donde puedes ejecutar todos los comandos de docker
mas rapido , se ejecuta una bash de linux con docker, con git y otro componentes ya instalados
para asi hacerte mas facil el uso de docker y no instalar en tu maquina es una buena 
herramienta para quienes no saben como instalar o apenas quieren ver como son los comandos o 
aprender su utilidad es variada

CLASE 6
COMO FUNCIONA DOCKER
Es una plataforma que permite contruir, ejecutar y comparit aplicaciones mediante 
contenedores

https://ualmtorres.github.io/SeminarioDockerPresentacion/images/DockerEngine.png

*Componentes dentro del Circulo de Docker 

Server Docker Deamon:
Es el centro de Docker, el corazon que gracias a el podemos manejar todas las entidates 
de docker gracias a el podemos crearlos, ejecutarlos, borrarlos, es el que va a interaturar con el sistemas operativo para que todo eso pase es el nucleo de docker 

REST API:
Es como culquie otra API que creamos con su sistema de creacion, eliminacion, etc. y que se puede interatuar con ella con los metodos http. 
Esto significa que nos podemos conectar desde nuestra propia maquina atraves de http o podemos exponer nuestro docker deamon para que sea visible y puedas conectarte remotamente 

Client Docker CLI
Este es la intefas que utlizamos para comunicarnos con el Docker Deamon es la misma que vamos a estar utilizando , para que se hagan una idea es donde ejecutamos los comandos de docker como docker --version o docker info. 

Cuando pasamos los comando por la Terminal lo que hacemos es ejecutar el CLI de docker
'cliente grafico de docker' para el se comunique con el Docker Deamon y este ya se encarga de ejecutarlos  

Dentro de la Arquitectura de Docker Encontramos

*container:
Es la razón de ser de Docker, es donde podemos encapsular nuestras imagenes para llevarlas a otra computadora, o servidor, etc.

*image:
Son las encapsulaciones de x contenedor. Podemos correr nuestra aplicación en Java por medio de una imagen, podemos utilizar Ubuntu para correr nuestro proyecto, etc.

*network
Son las que permiten la comunicación entre contenedores.

*Data volumes
Podemos acceder con seguridad al sistema de archivos de nuestra máquina.

NUEVO MODULO CONTENEDORES 

CLASE 7 
Para ejecutar una imagen de docker es super facil vamos a ejecutar una imagen que viene por defecto cuando instalamos docker 

EL comando es:

sudo docker run hello-world

Asi de facil hemos ejecutado una imagen de docker en nuestro maquina 

CLASE 8 
CONCEPTOS FUNDAMENTALES DE DOCKER :CONTENEDORES

¿ Que es un Contenedor ?

Un contenedor es :
*Una agrupacion de procesos

*Es una entidad logica, no tiene el limite estricto de las maquinas virtuales,ni el  de emulacion del sistema simulado por debajo 

*Ejecuta sus procesos de forma nativa

*Los procesos que se ejecutan adentro de los contenedores ven su universo como el contenedor lo define, no pueden ver mas allá del contenedor, a pesar de estar corriendo en una maquina más grande.

*No tienen forma de consumir más recursos que los que se les permite. Si esta restringido en memoria ram por ejemplo, es la única que pueden usar.

*A fines prácticos los podemos imaginar cómo maquinas virtuales, pero NO lo son. Podira decirse Máquinas virtuales livianas.

*Docker corre de forma nativa solo en Linux.

*Sector del disco: Cuando un contenedor es ejecutado, el daemon de docker le dice, a partir de acá para arriba este disco es tuyo, pero no puedes subir mas arriba.

*Docker hace que los procesos adentro de un contenedor este aislados del resto del sistema, no le permite ver más allá.

*Cada contenedor tiene un ID único, también tiene un nombre.


CLASE 9
comandos de DOCKER
* docker run hello-world : (corro el contenedor hello-world)
* docker ps              : (muestra los contenedores activos)
* docker ps -a           : (muestra todos los contenedores)
* docker rm <ID o nombre>: (borro un contenedor)
* docker container prune : (borro todos lo contenedores que esten parados)
* docker inspect <name>  : (igual que el anterior pero invocado con el nombre)
* docker inspect <containe ID> : (muestra el detalle completo de un contenedor)
* docker rename hello-platzi hola-platzy : (cambio el nombre de hello-platzi a hola-  platzi)
* docker run –-name hello-platzi hello-world : (le asigno un nombre custom “hello-platzi”)



CLASE 10 
MODO INTERATIVO 

El modo interativo es un comando que nos permite interaturar con distribuciones diferentes de sistemas operativos, es decir estamos corriendo un sistemas ubunto dentro de otro sistema puede ser windows, mac o hasta el mismo ubuntu  y dentro de el usando docker podemos poner a correr otro ubuntu con todo lo que trae un sistema ubunto por debajo 


Comandos para interatutar con el modo interativo
* docker run ubuntu : (corre un ubuntu pero lo deja apagado)
* docker ps -a      : (lista todos los contenedores)
* docker -it ubuntu : (lo corre y entro al shell de ubuntu)

Con este comando vemos o verificamos que version estamos utilizando de ubuntu dentro del shell de windos o mac 

*cat /etc/lsb-release: (veo la versión de Linux)

En general es el comando de de toda la vida de linux para mostrar el contenido de los archivos 'cat' y nos movemos entre las carpetas hasta llegar a la referencia del sistema 

para salir ya del sistema como tal y volver a windos o mac normal se usa el comando 'exit'

*exit

CLASE 11 
CILCO DE VIDA DE UN CONTENEDOR

vamos a explicar el proceso por el cual cuando damos exit se apaga el contenedor de ubuntu esto pasa por que se detiene el main processes o proceso principal el contenedor de ubuntu se ejecuta en el bin/bash esto hace que cuando nosotros damos exit salga de la carpeta principal donde se esta ejecutando todo el proceso y hay se detiene pero existen formas de mantener ese contenedor prendido. 

Hay dos porcesos principales que tienes que tener en cuenta estos se ejecutan una vez ejecutado el contenedor de ubuntu : 
Main process
Determina la vida del contenedor, un contendor corre siempre y cuando su proceso principal este corriendo.

Sub process
Un contenedor puede tener o lanzar procesos alternos al main process, si estos fallan el contenedor va a seguir encedido a menos que falle el main.

Lo que tienes que saber es cuando decimos que estamos corriendo un contenedor estamos ejecutando un proceso y mientras ese proceso siga vivo el contenedor se ejecutara a menos que lo matemos nosotros mismos y nos toque levantarlo nuevamente con los comandos que ya vimos. 

Comandos
* docker run --name alwaysup -d ubuntu tail -f /dev/null : 
lo que hc es ejecutar un contenedor con ubuntu pero en vez de ejecutarse el proceso con bin/bash lo ejecutamos con tail -f /dev/null esto nos permite tener el contenedor prendido para poder interatuar con el de muchas maneras la forma de detenerlo es matando el proceso 


*docker exec -it alwaysup bash :
Con este comando puedes ya interatuar con el ubuntu de tu contenedor , genera una terminal o un bash linux el cual en el puedes ejecutar todos los comandos de un sistema linux 


*docker inspect --format '{{.State.Pid}}' <name_container> :
Se puede matar un Main process desde afuera del contenedor, esto se logra conociendo el id del proceso principal del contenedor que se tiene en la maquina. 

*Kill  <id_process>
_El output del comando es el process ID (2474) _
Para matar el proceso principal del contenedor desde afuera se ejecuta el siguiente comando (solo funciona en linux)


CLASE 12 
EXPONIENDO CONTENEDORES

Los contenedores estan aislados del sistema y a nivel de red, cada contenedor tiene su propio stack de net sus propios puertos.
Debemos redirigir esos puertos a los puertos que estan disponibles en nuestra computadora y lo podemos hacer con la bandera -p lo que hace referencia a 'publish'

la bandera -d lo que hc ees q no vincula mi salida estandar al contenedor y lo ejecuta en bagroun
el comando que coneta el puerto de nuestra computadora con el puerto de un contenedor es :

Comandos :
*docker run -d --name [name] -p [LocalHostPort/8080]:[ContainerPort/80] [imagen/nginx]

*docker run -d --name proxy -p 8080:80 nginx:(corro un nginx y expongo el puerto 80 del contenedor en el puerto 8080 de mi máquina)localhost:8080 (desde mi navegador compruebo que funcione)

Otros Comandos
* docker stop  <nombre_contenedor> : (apaga el contenedor)
* docker run -d --name proxy nginx : (crea una imagen de nginx en el contenedor proxy)
* docker rm proxy                  : (borro el contenedor)
* docker rm -f <contenedor>        : (para el contendor y lo borra)
* docker logs proxy                : (veo los logs del contenedor)
* docker logs --tail 10 -f proxy   : (veo y sigo solo las 10 últimas entradas del log) 

NUEVO MODULO DATOS DE DOCKER

CLASE 13 
BIND MOUNTS -v
lo primero que tenemos que tener en cuenta es q debemos tener claro la ruta en donde se van a guardar archivos por ejemplo yo ya sabia que mongo guarda sus datos en una carpetada que se llama data y hay almacena los datos en un archivo llamado db en base a eso yo ya puedo saber en donde se van a guardar y asi uilizarlo 

los bind mounts son maneras de compartir tu informacion en diferentes contenedores sin que cuando elimines el contenedor no se pierda la informacion basicamente lo que hace es atar una ruta al contenedor todo lo que coloquemos o guardemos se quedara en la maquina anfitriona y sera cargado con la ruta del archivo al siguiente contenedor asi puede persistir los datos.

El bind mounts se identifica con la -v colocando el -v antes de la ruta que vamos  a especificar ya docker va a saber que eso es un bind mount 

Aqui especificamos que vamos a crear un contenedor con nombre db que va a puntar a esta ruta '/home/sebastian/Cursos/curso_docker/dockerdata/MongoData:/data/db' donde vamos a guardar nuestra informacion de los usuarios.
Cada vez que borremos y volvamos a crear un contenedor debemos apuntar a donde se van a guarda la informacion 

comando principal
*sudo docker run -d --name db -v /home/sebastian/Cursos/curso_docker/dockerdata/MongoData:/data/db mongo:

comandos 
* mkdir dockerdata : (creo un directorio en mi máquina con nombre dockerdata)
* docker ps        : (veo los contenedores activos)
* docker run -d --name db mongo : ( ejecuta un contenedor con nombre db y una imagen de mongo)
* docker exec -it db bash       : (entro al bash del contenedor)
* mongo : (me conecto a la BBDD de mongo)
	Dentro ya del bash y ejecuantando mongo en la terminal de comandos podes comenzar a interatuar con la base de datos: 
	*shows dbs (listo las BBDD)
	*use platzi ( creo la BBDD platzi)
	*db.users.insert({“nombre”:“guido”}) (inserto un nuevo dato)
	*db.users.find() (veo el dato que agrege)

CLASE 14 
OTRA MANERA DE ALMECENAR DATOS 'VOLUMENES --mount'
Docker nos ofrece otras maneras de manjear datos distintas a los band mounts vamos a hablar de volumes que es la manera mas estandar de manejar datos en docker que no es la primera que salio pero los volumenes llegaron para solucionar un problema de los band mounts es la nueva actualizacion de docker para manejar datos y mas seguro para las personas que ejecutan docker en entornos productivos, tiene mas seguridad que los band mounts , lo que sucede es que la parte del disco que le estamos dando lo coje el deamon de docker y lo administra y ya no esta disponible solo docker lo puede ver y lo esta administrando lo reguarda y le coloca mas seguridad encima, para poder acceder a el tenemos que ir directamente al docker volums para mirar el conenido del archivo esta es una de las desventajas de docker

ventajas de los Volumenes 
*Los volúmenes son más fáciles de respaldar o migrar que enlazar montajes.
*Puede administrar volúmenes mediante los comandos de la CLI de Docker o la API de Docker.
*Los volúmenes funcionan tanto en contenedores de Linux como de Windows.
*Los volúmenes se pueden compartir de forma más segura entre varios contenedores.
*Los controladores de volumen le permiten almacenar volúmenes en hosts remotos o proveedores en la nube, para cifrar el contenido de los volúmenes o para agregar otras funciones.
*Los nuevos volúmenes pueden tener su contenido precargado por un contenedor.
*Los volúmenes en Docker Desktop tienen un rendimiento mucho mayor que los montajes de enlace de hosts de Mac y Windows.

Comandos
* docker volume ls :
listo los volumes

* docker volume create dbdata :
creo un volume de nombre dbdata

* docker run -d --name db --mount src=dbdata,dst=/data/db mongo :
	+ vamos a correr un contenedor 
	
	+ El -d significa que se va a ejecutar en bagraoun osea que se va a estar ejecutando por debajo
	
	+ Despues el nombre 'db'
	
 	+ Le decimos que esto va a ser un volumen con la bandera --mount esta recive dos parametros el src='va a ser igual al 		  nombre del volumen si el volumen no esta creado docker automaticamente lo crea', despues le decimos donde van a 		  estar los datos que tiene que guardar y administrar'dts=/data/db' 
 	
 	+ despues le decimos de coja la imagen de mongo 

* docker inspect db :
veo la información detallada del contenedor

*mongo :
Me conecto a la BBDD
	una vez ya dentro de mongo ejecuto los comandos para crear la base de datos :
	* shows dbs  :listo las BBDD
	* use platzi : creo la BBDD platzi
	* db.users.insert({“nombre”:“guido”}): inserto un nuevo dato
	* db.users.find(): veo el dato que cargué
	
	
CLASE 15 
INSERTAR Y EXTRAER ARCHIVOS DE UN CONTENEDOR 

para insertar archivos y extraerlor no necesariamente se tienen que tener bind mount o volumenes las operaciones se pueden implementar para mover una carpeta o un archivo ,un bind mount o volumenes es indispensable saber que las operaciones funcionaran asi alla o no volumenes o bind mount 
 
Comandos
* touch prueba.txt :
creo un archivo en mi máquina

* docker run -d --name copytest ubuntu tail -f /dev/null : 
corron un ubuntu y le agrego el 'tail -f /dev/null' para que quede activo

* docker exec -it copytest bash :
Entro al  bash del contenedor con nombre copytest

* mkdir testing :
creo un directorio en el contenedor

* docker cp prueba.txt copytest:/testing/test.txt :
copio el archivo 'prueba.txt' dentro del contenedor 'copytest' despues especifico la ruta en donde quiero copiarla

* docker cp copytest:/testing localtesting :
copio el directorio 'testing' del contenedor 'copytest' a mi máquina con nombre 'localtesting')

En otras palabras el esquema es asi :
*Host : Es donde esta instalado Docker o la maquina anfitriona

*Bind Mount: Guarda los archivos en la maquina local persistiendo y visualizando estos datos (No seguro)

*Volumenes : Guarda los archivos en el area de Docker donde Docker los administra(Segura)

*TMPFS Mount : Guarda los archivos temporalmente y persiste los datos en la memoria del contenedor, cuando mates sus datos mueren con el contenedor  


NUEVO MODULO IMAGENES  'IMAGE'

CLASE 16 
CONCEPTO FUNDAMENTALES DE DOCKER: IMAGENES 'IMAGE'
Las imagenes llegan para solucionar los problemas de construcion y distribucion de sofware. 

Las imagenes son plantillas o moldes apartir de las cuales docker crea contenedores una imagen es una pieza de sofware enpaquetada de forma liviana que contiene todo lo nesesario para que un contenedor se pueda ejecutar exitosamente ya sean dependecias de sofware , librerias ,codigo , herramientas ect es decir todo lo que el contenedor nesesita para ejecutarse esta dentro de una imagen , las imagenes son las plantillas las cuales vamos a usar para crear los contenedores mismo. 

Todo lo que el contenedor nesesita esta dentro de una imagen 
Comandos:
*docker image ls :
veo las imágenes que tengo localmente

*docker pull ubuntu:20.04 :
Bajo la imagen de ubuntu de dockerHud con una versión específica, puedes  ver todas las imagenes que estan disponibles en docker hub

CLASE 17 
CONSTRUYENDO UNA IMAGEN PROPIA 

Profundizando en el concepto de imágen :
Es bueno profundizar un poco más en el concepto de una imágen en Docker para entender su función, para posteriormente poder realizar una por nuestra cuenta desde 0, cuando no haya una imágenque cumpla con nuestras necesidades.

Imágen
Una imágen contiene distintas capas de datos (distribución, diferente software, librerías y personalización).
Podemos llegar a la conslusión, que una imágen se conforma de distintas capas de personalización, en base a una capa inicial (base image), la dicha capa, es de donde la bajas de docker hud . Es la primera, si le agregas algo al contenedor de ubuntu una carpeta, un archivo, una funcionalidad  estas creando una capa nueva en base a la que ya tenias y asi puedes ir creando otro que tenga la funcionalidad creada ateriormente  y quieres agregarle otra funcion , ya es otra imagen pero ya en base ala que habiamos modificado 

Comando
Historico de una imágen
Podemos observar la historia de nuestra imágen, con el siguiente comando
$ docker history [imagen]

Para contruir una imagen siempre tiene que estar basado en un archivo que se llama dockerfile el proceso es :
partiendo de un dockerfile que describe lo que yo quiero que pase cuando creo una imagen y con un comando que se llama build el resultado va a ser una imagen , lo que tienes que tener en cuenta es q de una imagen puedemos generar infinitos contenedores no hay limites pero siempre es la misma imagen , lo interesante de esto es la manera de almacenar las imagenes en disco 

comandos 
$ mkdir imagenes :
  creo un directorio en mi máquina

$ cd imagenes :
  entro al directorio

$ touch Dockerfile :
  creo un Dockerfile
  
$ code . :
  abro mi visuls tudio code en el direcotrio en el que estoy
  
Dentro ya del visul studio code agrego contenido el archivo dockerfile 

	*FROM ubuntu:latest               : le decimos que cree la imagen basada en ubuntu:latest 
	
	*RUN touch /ust/src/ejemplos.txt  : despues le decimos que en base una imagen de ubuntu:latest resulte en una imagen nueva 

* docker build -t ubuntu:platzi . :
  
* docker run -it ubuntu:platzi    :
  Corro el contenedor con la nueva imagen
  
* docker login :
  Me logueo en docker hub
  
* docker tag ubuntu:platzi <mi_usuario_dockerhud>/ubuntu:platzy :
  cambio el nombre del imagen por que docker hud no me lo permite asi.
  por que cree que es una distribucion ofical de ubuntu una actulizacion y te denegara el acceso por no tener los permisos    
  para evitar eso cambiamos el nombre de la imagen con la bandera 

* docker push <mi_usuario_dockerhud>/ubuntu:platzi :
  publico la imagen a mi docker hub
